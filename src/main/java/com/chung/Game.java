package com.chung;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.IOException;

public class Game extends JFrame {
	private Font digitalFont;
	private JLabel bombCountLb;
	private JButton resetBtn;
	private JLabel timeLb;
	private JPanel contentPane;
	private JPanel gameBoardPanel;
	private JToggleButton bgnMode;
	private JToggleButton InterMode;
	private JToggleButton ExpMode;
	private GameLogic logic;
	private Timer timer;
	private long time;
	
	public Game() {
		setContentPane(contentPane);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		try {
			digitalFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getClassLoader().getResourceAsStream("DS-DIGIB.TTF"))
					.deriveFont(Font.BOLD, 36f);
			resetBtn.setIcon(ImageLoader.load(Images.SMILE));
		} catch (FontFormatException | IOException e) {
			e.printStackTrace();
		}
		timer = new Timer(1000, e -> {
			++time;
			timeLb.setText(String.valueOf(time < 10 ? "0" + time : time));
		});
		resetBtn.addActionListener(this::onRestartBtnClick);
		bombCountLb.setFont(digitalFont);
		timeLb.setFont(digitalFont);
		logic = new GameLogic(this);
		restartGame();
	}
	
	private void renderGrid() {
		gameBoardPanel.removeAll();
		Cell[][] grid = logic.getGrid();
		GameModes mode = logic.getMode();
		for (int i = 0; i < mode.ROWS; ++i) {
			for (int j = 0; j < mode.COLS; ++j) {
				GridBagConstraints constraints = new GridBagConstraints(
						j, i, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0
				);
				gameBoardPanel.add(grid[i][j], constraints);
			}
		}
	}
	
	private void onRestartBtnClick(ActionEvent e) {
		restartGame();
	}
	
	private GameModes getSelectedGameMode() {
		if (bgnMode.isSelected()) {
			return GameModes.BEGINNER;
		}
		if (InterMode.isSelected()) {
			return GameModes.INTERMEDIATE;
		}
		return GameModes.EXPERT;
	}
	
	private void restartGame() {
		timer.restart();
		time = 0;
		logic.initGame(getSelectedGameMode());
		bombCountLb.setText(String.valueOf(logic.getRemainBombs()));
		renderGrid();
		pack();
		try {
			resetBtn.setIcon(ImageLoader.load(Images.SMILE));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void gameOver() {
		timer.stop();
		try {
			resetBtn.setIcon(ImageLoader.load(Images.SAD));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void gameWin() {
		timer.stop();
		try {
			resetBtn.setIcon(ImageLoader.load(Images.HAPPY));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void setRemainBombLabel(int remain) {
		bombCountLb.setText(String.valueOf(remain));
	}
	
	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
		} catch (Exception e) {
			e.printStackTrace();
		}
		EventQueue.invokeLater(() -> {
			new Game().setVisible(true);
		});
	}
	
	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}
	
	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		panel2.setBackground(new Color(-16777216));
		panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		bombCountLb = new JLabel();
		bombCountLb.setForeground(new Color(-65536));
		bombCountLb.setText("00");
		panel2.add(bombCountLb);
		resetBtn = new JButton();
		resetBtn.setText("");
		panel1.add(resetBtn, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		panel3.setBackground(new Color(-16777216));
		panel1.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		timeLb = new JLabel();
		timeLb.setForeground(new Color(-65536));
		timeLb.setText("00");
		panel3.add(timeLb);
		final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
		panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
		panel1.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		gameBoardPanel = new JPanel();
		gameBoardPanel.setLayout(new GridBagLayout());
		contentPane.add(gameBoardPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		gameBoardPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null));
		final JPanel panel4 = new JPanel();
		panel4.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		contentPane.add(panel4, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		bgnMode = new JToggleButton();
		bgnMode.setSelected(true);
		bgnMode.setText("Beginner");
		panel4.add(bgnMode);
		InterMode = new JToggleButton();
		InterMode.setText("Intermediate");
		panel4.add(InterMode);
		ExpMode = new JToggleButton();
		ExpMode.setText("Expert");
		panel4.add(ExpMode);
		ButtonGroup buttonGroup;
		buttonGroup = new ButtonGroup();
		buttonGroup.add(bgnMode);
		buttonGroup.add(InterMode);
		buttonGroup.add(ExpMode);
	}
	
	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}
}
